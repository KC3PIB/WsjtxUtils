using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Diagnostics.CodeAnalysis;
using WsjtxUtils.WsjtxMessages.Messages;

namespace WsjtxUtils.WsjtxMessages.Tests.Messages
{
    [TestClass]
    [ExcludeFromCodeCoverage]
    public class LoggedAdifTests
    {
        internal static Memory<byte> LoggedAdiMessage = new(new byte[] { 0xAD, 0xBC, 0xCB, 0xDA, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x10, 0x57, 0x53, 0x4A, 0x54, 0x2D, 0x58, 0x20, 0x2D, 0x20, 0x53, 0x6C, 0x69, 0x63, 0x65, 0x2D, 0x41, 0x00, 0x00, 0x01, 0x53, 0x0A, 0x3C, 0x61, 0x64, 0x69, 0x66, 0x5F, 0x76, 0x65, 0x72, 0x3A, 0x35, 0x3E, 0x33, 0x2E, 0x31, 0x2E, 0x30, 0x0A, 0x3C, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x69, 0x64, 0x3A, 0x36, 0x3E, 0x57, 0x53, 0x4A, 0x54, 0x2D, 0x58, 0x0A, 0x3C, 0x45, 0x4F, 0x48, 0x3E, 0x0A, 0x3C, 0x63, 0x61, 0x6C, 0x6C, 0x3A, 0x35, 0x3E, 0x45, 0x41, 0x35, 0x52, 0x57, 0x20, 0x3C, 0x67, 0x72, 0x69, 0x64, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3A, 0x34, 0x3E, 0x49, 0x4D, 0x39, 0x39, 0x20, 0x3C, 0x6D, 0x6F, 0x64, 0x65, 0x3A, 0x33, 0x3E, 0x46, 0x54, 0x38, 0x20, 0x3C, 0x72, 0x73, 0x74, 0x5F, 0x73, 0x65, 0x6E, 0x74, 0x3A, 0x33, 0x3E, 0x2D, 0x30, 0x36, 0x20, 0x3C, 0x72, 0x73, 0x74, 0x5F, 0x72, 0x63, 0x76, 0x64, 0x3A, 0x33, 0x3E, 0x2D, 0x31, 0x38, 0x20, 0x3C, 0x71, 0x73, 0x6F, 0x5F, 0x64, 0x61, 0x74, 0x65, 0x3A, 0x38, 0x3E, 0x32, 0x30, 0x32, 0x31, 0x31, 0x32, 0x30, 0x31, 0x20, 0x3C, 0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x6E, 0x3A, 0x36, 0x3E, 0x30, 0x35, 0x32, 0x35, 0x33, 0x30, 0x20, 0x3C, 0x71, 0x73, 0x6F, 0x5F, 0x64, 0x61, 0x74, 0x65, 0x5F, 0x6F, 0x66, 0x66, 0x3A, 0x38, 0x3E, 0x32, 0x30, 0x32, 0x31, 0x31, 0x32, 0x30, 0x31, 0x20, 0x3C, 0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6F, 0x66, 0x66, 0x3A, 0x36, 0x3E, 0x30, 0x35, 0x32, 0x36, 0x33, 0x30, 0x20, 0x3C, 0x62, 0x61, 0x6E, 0x64, 0x3A, 0x33, 0x3E, 0x34, 0x30, 0x6D, 0x20, 0x3C, 0x66, 0x72, 0x65, 0x71, 0x3A, 0x38, 0x3E, 0x37, 0x2E, 0x30, 0x37, 0x36, 0x34, 0x31, 0x37, 0x20, 0x3C, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x5F, 0x63, 0x61, 0x6C, 0x6C, 0x73, 0x69, 0x67, 0x6E, 0x3A, 0x36, 0x3E, 0x4B, 0x43, 0x33, 0x50, 0x49, 0x42, 0x20, 0x3C, 0x6D, 0x79, 0x5F, 0x67, 0x72, 0x69, 0x64, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x3A, 0x34, 0x3E, 0x45, 0x4E, 0x39, 0x30, 0x20, 0x3C, 0x74, 0x78, 0x5F, 0x70, 0x77, 0x72, 0x3A, 0x32, 0x3E, 0x35, 0x30, 0x20, 0x3C, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x3A, 0x32, 0x35, 0x3E, 0x46, 0x54, 0x38, 0x20, 0x20, 0x53, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x2D, 0x30, 0x36, 0x20, 0x20, 0x52, 0x63, 0x76, 0x64, 0x3A, 0x20, 0x2D, 0x31, 0x38, 0x20, 0x3C, 0x45, 0x4F, 0x52, 0x3E });

        [TestMethod()]
        public void CreateLoggedAdifMessageFrom_RawBytes_ProducesValidMessage()
        {
            var result = LoggedAdiMessage.DeserializeWsjtxMessage();
            Assert.IsNotNull(result);
            Assert.IsInstanceOfType(result, typeof(LoggedAdif));

            LoggedAdif message = result as LoggedAdif;
            Assert.AreEqual(WsjtxConstants.MagicNumber, message.MagicNumber);
            Assert.AreEqual(SchemaVersion.Version2, message.SchemaVersion);
            Assert.AreEqual(MessageType.LoggedADIF, message.MessageType);
            Assert.AreEqual("WSJT-X - Slice-A", message.Id);
            Assert.AreEqual("\n<adif_ver:5>3.1.0\n<programid:6>WSJT-X\n<EOH>\n<call:5>EA5RW <gridsquare:4>IM99 <mode:3>FT8 <rst_sent:3>-06 <rst_rcvd:3>-18 <qso_date:8>20211201 <time_on:6>052530 <qso_date_off:8>20211201 <time_off:6>052630 <band:3>40m <freq:8>7.076417 <station_callsign:6>KC3PIB <my_gridsquare:4>EN90 <tx_pwr:2>50 <comment:25>FT8  Sent: -06  Rcvd: -18 <EOR>", message.AdifText);
        }
    }
}
