using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Diagnostics.CodeAnalysis;
using WsjtxUtils.WsjtxMessages.Messages;

namespace WsjtxUtils.WsjtxMessages.Tests.Messages
{
    [TestClass]
    [ExcludeFromCodeCoverage]
    public class OsoLoggedTests
    {
        internal static Memory<byte> OsoLoggedMessage = new(new byte[] { 0xAD, 0xBC, 0xCB, 0xDA, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x10, 0x57, 0x53, 0x4A, 0x54, 0x2D, 0x58, 0x20, 0x2D, 0x20, 0x53, 0x6C, 0x69, 0x63, 0x65, 0x2D, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x87, 0x9E, 0x01, 0x2A, 0xEB, 0xFA, 0x01, 0x00, 0x00, 0x00, 0x05, 0x45, 0x41, 0x35, 0x52, 0x57, 0x00, 0x00, 0x00, 0x04, 0x49, 0x4D, 0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0xFA, 0x41, 0x00, 0x00, 0x00, 0x03, 0x46, 0x54, 0x38, 0x00, 0x00, 0x00, 0x03, 0x2D, 0x30, 0x36, 0x00, 0x00, 0x00, 0x03, 0x2D, 0x31, 0x38, 0x00, 0x00, 0x00, 0x02, 0x35, 0x30, 0x00, 0x00, 0x00, 0x19, 0x46, 0x54, 0x38, 0x20, 0x20, 0x53, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x2D, 0x30, 0x36, 0x20, 0x20, 0x52, 0x63, 0x76, 0x64, 0x3A, 0x20, 0x2D, 0x31, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x87, 0x9E, 0x01, 0x2A, 0x03, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x4B, 0x43, 0x33, 0x50, 0x49, 0x42, 0x00, 0x00, 0x00, 0x04, 0x45, 0x4E, 0x39, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF });

        [TestMethod()]
        public void CreateStatusMessageFrom_RawBytes_ProducesValidMessage()
        {
            var result = OsoLoggedMessage.DeserializeWsjtxMessage();
            Assert.IsNotNull(result);
            Assert.IsInstanceOfType(result, typeof(QsoLogged));

            QsoLogged message = result as QsoLogged;
            Assert.AreEqual(WsjtxConstants.MagicNumber, message.MagicNumber);
            Assert.AreEqual(SchemaVersion.Version2, message.SchemaVersion);
            Assert.AreEqual(MessageType.QSOLogged, message.MessageType);
            Assert.AreEqual("WSJT-X - Slice-A", message.Id);
            Assert.AreEqual("2021-12-01T05:26:30.1380000Z", message.DateTimeOff.ToString("O"));
            Assert.AreEqual("EA5RW", message.DXCall);
            Assert.AreEqual("IM99", message.DXGrid);
            Assert.AreEqual(7076417U, message.TXFrequencyInHz);
            Assert.AreEqual("FT8", message.Mode);
            Assert.AreEqual("-06", message.ReportSent);
            Assert.AreEqual("-18", message.ReportReceived);
            Assert.AreEqual("50", message.TXPower);
            Assert.AreEqual("FT8  Sent: -06  Rcvd: -18", message.Comments);
            Assert.AreEqual("", message.Name);
            Assert.AreEqual("2021-12-01T05:25:30.5210000Z", message.DateTimeOn.ToString("O"));
            Assert.AreEqual("", message.OperatorCall);
            Assert.AreEqual("KC3PIB", message.MyCall);
            Assert.AreEqual("EN90", message.MyGrid);
            Assert.AreEqual("", message.ExchangeSent);
            Assert.AreEqual("", message.ExchangeReceived);
        }
    }
}
